{"version":3,"sources":["helper/api.js","components/SortPanel.tsx","components/TodoList.tsx","App.tsx","index.tsx"],"names":["URL_API","getTodos","a","fetch","response","json","getUsers","buttons","name","sortType","SortPanel","sorted","useState","activeBtn","setActiveBtn","map","button","type","key","onClick","className","TodoList","todos","changeStatus","completed","user","title","id","cn","normalizeTodos","users","todo","find","userId","App","loading","setLoading","isContentVisible","setContentVisible","setTodos","sortName","sort","b","localeCompare","actualTodos","then","todosFromServer","ReactDOM","render","document","getElementById"],"mappings":"iSAAMA,G,MAAU,wCAEHC,EAAQ,uCAAG,4BAAAC,EAAA,sEACCC,MAAM,GAAD,OAAIH,EAAJ,WADN,cAChBI,EADgB,yBAEfA,EAASC,QAFM,2CAAH,qDAKRC,EAAQ,uCAAG,4BAAAJ,EAAA,sEACCC,MAAM,GAAD,OAAIH,EAAJ,WADN,cAChBI,EADgB,yBAEfA,EAASC,QAFM,2CAAH,qDCLfE,EAAU,CACd,CAAEC,KAAM,eAAgBC,SAAU,SAClC,CAAED,KAAM,oBAAqBC,SAAU,aACvC,CAAED,KAAM,oBAAqBC,SAAU,SAO5BC,EAAiC,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAAa,EAC1BC,mBAAS,IADiB,mBACrDC,EADqD,KAC1CC,EAD0C,KAG5D,OACE,2BACGP,EAAQQ,KAAI,SAAAC,GACX,OACE,4BACEC,KAAK,SACLC,IAAKF,EAAOR,KACZW,QAAS,WACPL,EAAaE,EAAOP,UACpBE,EAAOK,EAAOP,WAEhBW,UAAWJ,EAAOP,WAAaI,EAAY,yBAA2B,mBAErEG,EAAOR,W,iBCzBPa,EAAoC,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,aACzD,OACE,6BACGD,EAAMP,KAAI,gBACTS,EADS,EACTA,UAAWC,EADF,EACEA,KAAMC,EADR,EACQA,MAAOC,EADf,EACeA,GADf,OAGT,4BACEV,KAAK,SACLG,UAAYQ,IAAG,QACb,CAAE,gBAAiBJ,EAAW,iBAAkBA,IAClDN,IAAKS,EACLR,QAAS,kBAAMI,EAAaI,KAE5B,8BAAOD,GACP,8BAAOD,EAAKjB,YCXhBqB,EAAc,uCAAG,8BAAA3B,EAAA,sEACDD,IADC,cACfqB,EADe,gBAEDhB,IAFC,cAEfwB,EAFe,yBAIdR,EAAMP,KAAI,SAACgB,GAChB,OAAO,2BACFA,GADL,IAEEN,KAAMK,EAAME,MAAK,SAACP,GAAD,OAAgBA,EAAKE,KAAOI,EAAKE,gBAPjC,2CAAH,qDA2FLC,EA/EH,WAAO,IAAD,EACctB,oBAAS,GADvB,mBACTuB,EADS,KACAC,EADA,OAE8BxB,oBAAS,GAFvC,mBAETyB,EAFS,KAESC,EAFT,OAGU1B,mBAA2B,IAHrC,mBAGTU,EAHS,KAGFiB,EAHE,KAsDhB,OAAIJ,EACK,yCAIP,oCACIE,EAUE,oCACE,kBAAC,EAAD,CAAW1B,OAxDH,SAAC6B,GACjB,OAAQA,GACN,IAAK,QAKH,YAJAD,EAAS,YAAIjB,GAAOmB,MAAK,SAACvC,EAAGwC,GAC3B,OAAOxC,EAAEwB,MAAMiB,cAAcD,EAAEhB,WAInC,IAAK,YAKH,YAJAa,EAAS,YAAIjB,GAAOmB,MAAK,SAACvC,EAAGwC,GAC3B,OAAQxC,EAAEsB,WAAakB,EAAElB,cAI7B,IAAK,OAKH,YAJAe,EAAS,YAAIjB,GAAOmB,MAAK,SAACvC,EAAGwC,GAC3B,OAAOxC,EAAEuB,KAAKjB,KAAKmC,cAAcD,EAAEjB,KAAKjB,UAI5C,QACE+B,EAAS,YAAIjB,QAoCT,kBAAC,EAAD,CAAUC,aA/BK,SAACI,GACxB,IAAMiB,EAActB,EAAMP,KAAI,SAAAgB,GAC5B,OAAIA,EAAKJ,KAAOA,EACP,2BAAKI,GAAZ,IACEP,WAAYO,EAAKP,YAGdO,KAGTQ,EAASK,IAqByCtB,MAAOA,KAXrD,4BACEL,KAAK,SACLE,QA1DY,WAClBiB,GAAW,GACXP,IACGgB,MAAK,SAAAC,GACJP,EAASO,GACTV,GAAW,GACXE,GAAkB,OAqDhBlB,UAAU,mBAHZ,UCzER2B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.8744d076.chunk.js","sourcesContent":["const URL_API = 'https://jsonplaceholder.typicode.com';\n\nexport const getTodos = async () => {\n  const response = await fetch(`${URL_API}/todos`)\n  return response.json();\n}\n\nexport const getUsers = async () => {\n  const response = await fetch(`${URL_API}/users`)\n  return response.json();\n}\n","import React, { useState } from 'react';\n\nconst buttons = [\n  { name: 'Sort by Name', sortType: 'title' },\n  { name: 'Sort by Completed', sortType: 'completed' },\n  { name: 'Sort by User Name', sortType: 'user' },\n];\n\ntype PropsSort = {\n  sorted: (sorted: string) => void;\n};\n\nexport const SortPanel: React.FC<PropsSort> = ({ sorted }) => {\n  const [activeBtn, setActiveBtn] = useState('');\n\n  return (\n    <p>\n      {buttons.map(button => {\n        return (\n          <button\n            type=\"button\"\n            key={button.name}\n            onClick={() => {\n              setActiveBtn(button.sortType);\n              sorted(button.sortType);\n            }}\n            className={button.sortType === activeBtn ? 'btn btn-warning active' : 'btn btn-warning'}\n          >\n            {button.name}\n          </button>\n        );\n      })}\n    </p>\n  );\n};\n","import React from 'react';\nimport cn from 'classnames';\n\nexport const TodoList: React.FC<TodoListProps> = ({ todos, changeStatus }) => {\n  return (\n    <div>\n      {todos.map(({\n        completed, user, title, id,\n      }) => (\n        <button\n          type=\"button\"\n          className= {cn('alert',\n            { 'alert-success': completed, 'alert-primary': !completed })}\n          key={id}\n          onClick={() => changeStatus(id)}\n        >\n          <span>{title}</span>\n          <span>{user.name}</span>\n        </button>\n      ))}\n    </div>\n  );\n};\n\ntype TodoListProps = {\n  todos: TodoNormalized[];\n  changeStatus(id: number): void;\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getTodos, getUsers } from './helper/api';\nimport { SortPanel } from './components/SortPanel';\nimport { TodoList } from './components/TodoList';\n\nconst normalizeTodos = async () => {\n  const todos = await getTodos();\n  const users = await getUsers();\n\n  return todos.map((todo: Todo) => {\n    return {\n      ...todo,\n      user: users.find((user: User) => user.id === todo.userId),\n    };\n  });\n};\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [isContentVisible, setContentVisible] = useState(false);\n  const [todos, setTodos] = useState<TodoNormalized[]>([]);\n\n  const onLoadClick = () => {\n    setLoading(true);\n    normalizeTodos()\n      .then(todosFromServer => {\n        setTodos(todosFromServer);\n        setLoading(false);\n        setContentVisible(true);\n      });\n  };\n\n  const sortTodos = (sortName: string|boolean) => {\n    switch (sortName) {\n      case 'title':\n        setTodos([...todos].sort((a, b) => {\n          return a.title.localeCompare(b.title);\n        }));\n\n        return;\n      case 'completed':\n        setTodos([...todos].sort((a, b) => {\n          return +a.completed - +b.completed;\n        }));\n\n        return;\n      case 'user':\n        setTodos([...todos].sort((a, b) => {\n          return a.user.name.localeCompare(b.user.name);\n        }));\n\n        return;\n      default:\n        setTodos([...todos]);\n    }\n  };\n\n\n  const changeTodoStatus = (id: number) => {\n    const actualTodos = todos.map(todo => {\n      if (todo.id === id) {\n        return { ...todo,\n          completed: !todo.completed };\n      }\n\n      return todo;\n    });\n\n    setTodos(actualTodos);\n  };\n\n  if (loading) {\n    return <p>Loading...</p>;\n  }\n\n  return (\n    <>\n      {!isContentVisible ? (\n        <button\n          type=\"button\"\n          onClick={onLoadClick}\n          className=\"btn btn-success\"\n        >\n          Load\n        </button>\n      )\n        : (\n          <>\n            <SortPanel sorted={sortTodos} />\n            <TodoList changeStatus={changeTodoStatus} todos={todos} />\n          </>\n        )}\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {} from './helper/api';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}